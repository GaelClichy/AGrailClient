using System.Collections;
using System.Collections.Generic;
namespace Editor.UIGen
{
    public class UIFactoryCoder : Singleton<UIFactoryCoder>
    {
        const string CodePath = "Scripts/UI/Auto";
        const string ClassName = "WinFactoryTest";
        List<string> winAssetPathes = new List<string>();
        FileWriter writer;
        public void Generate(List<string> winAssetPathes)
        {
            this.winAssetPathes.Clear();
            this.winAssetPathes.AddRange(winAssetPathes);
            if (writer != null)
                writer.Dispose();
            writer = new Editor.FileWriter(EditorTool.UnityPathToSystemPath(string.Format("{0}/{1}.cs", CodePath, ClassName)));

            WriteContent();

            this.winAssetPathes.Clear();
            writer.Dispose();
            writer = null;
        }

        void WriteContent()
        {
            writer.Append("using UnityEngine;");
            writer.Append("using System.Collections;");
            writer.Append("namespace UI");
            writer.Append("{");
            writer.Append("    public class WinFactory");
            writer.Append("    {");
            writer.Append("        public static Window Create(string windowName, int identity)");
            writer.Append("        {");
            writer.Append("            switch (windowName)");
            writer.Append("            {");



            writer.Append("                /*");
            writer.Append("                 * compisewindow 使用_p _c结尾来表示是父或是子");
            writer.Append("                 * case \"compise_p\":");
            writer.Append("                 * return new CompiseWindow(identity);");
            writer.Append("                 */");
            writer.Append("                default:");
            writer.Append("                    return null;");
            writer.Append("            }");
            writer.Append("        }");
            writer.Append("    }");
            writer.Append("}");
        }

        void WriteWindowNames()
        {
            
        }
    }
}